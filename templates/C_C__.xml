<templateSet group="C/C++">
  <template name="/&lt;" value="/**&lt; $TEXT$$END$ */ $END$" shortcut="SPACE" description="Doxygen member doc" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="/h" value="///*****************************************************************************&#10;/*&#10;|*  Copyright       :   (c) $YEAR$ CAS (Deutschland) &#10;|*  Filename        :   $FILE_NAME$&#10;|*  Version         :   0.1&#10;|*  Programmer(s)   :   Rolf Luebess (RL)&#10;|*  Created         :   $DATE$ &#10;|*  Modified        :&#10;|*  Description     :   $SELECTION$&#10;|*  &#10;|*  This file was created as part of the GOBD fiscal memory project&#10;*/ &#10;//****************************************************************************///&#10;&#10;$END$&#10;" description="File-Header in CAS DE Style" toReformat="false" toShortenFQNames="true">
    <variable name="YEAR" expression="date(&quot;Y&quot;)" defaultValue="" alwaysStopAt="false" />
    <variable name="FILE_NAME" expression="fileName()" defaultValue="" alwaysStopAt="false" />
    <variable name="DATE" expression="date(&quot;dd.MM.Y&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="CSS" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="HTML" value="false" />
      <option name="JSON" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="/m" value="// MOD: RL ($DATE$) $SELECTION$ //$END$" shortcut="SPACE" description="Modified by Rolf" toReformat="false" toShortenFQNames="true">
    <variable name="DATE" expression="date(&quot;dd.MM.Y&quot;)" defaultValue="" alwaysStopAt="false" />
    <context>
      <option name="c" value="true" />
    </context>
  </template>
  <template name="##" value="#ifdef $NAME$&#10;$SELECTION$ &#10;#endif    //$NAME$&#10;$END$" description="#ifdef mit ende" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="completeSmart(snakeCase(String))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="/*" value="/** $TEXT$$END$ */ $END$" shortcut="SPACE" description="Section Comment" toReformat="true" toShortenFQNames="true">
    <variable name="TEXT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="Python" value="true" />
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="#r" value="/** $NAME$ */&#10;//region $NAME$&#10;SwBi_Error_t $NAME$() {&#10;    SwBi_Error_t tseResult;&#10;$SELECTION$ &#10;    return tseResult;&#10;}&#10;//endregion  //$NAME$&#10;$END$" shortcut="SPACE" description="#region mit ende" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="completeSmart(snakeCase(String))" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
      <option name="cpp" value="true" />
    </context>
  </template>
  <template name="/tsecmdAsync" value="uint8_t tmpDataBuf[31] = {0x00};&#10;uint32_t timeOut = 2000;&#10;if ((tseResult = SendCmd(sbcmd_DummyCmd, (const uint8_t *) tmpDataBuf, sizeof(tmpDataBuf),&#10;                         (NULL),    // No Callback, sync operation&#10;                         timeOut)) != SwBi_ERROR_NOERROR) {&#10;    RETURN_WARN1(&quot;Sending xxx failed&quot;);&#10;}&#10;$END$&#10;" shortcut="SPACE" description="TSE CMD call with return" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="c" value="true" />
    </context>
  </template>
  <template name="/tsefun" value="if ((tseResult = $NAME$ ()) != SwBi_ERROR_NOERROR) {&#10;            SYS_DEBUG_BreakPoint();&#10;            RETURN_WARN1(&quot;executing $NAME$ failed&quot;);&#10;}&#10;$END$&#10;" shortcut="SPACE" description="TSE Function with Return Check" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="sbcmd_DummyCmd" alwaysStopAt="true" />
    <context>
      <option name="c" value="true" />
    </context>
  </template>
  <template name="/tsecmdwait_WithResponse" value="uint8_t tmpDataBuf[31] = {0x00};&#10;uint32_t timeOut = 2000;&#10;&#10;uint8_t respBuffer[512]={0};&#10;uint32_t respDataLen;&#10;&#10;if ((tseResult = sendCmdWaitResponse(sbcmd_DummyCmd, (const uint8_t *) tmpDataBuf, sizeof(tmpDataBuf),&#10;                         (NULL),    // No Callback, sync operation&#10;                         timeOut,&#10;                         respBuffer, sizeof(respBuffer), &amp;respDataLen&#10;                         )) != SwBi_ERROR_NOERROR) {&#10;    SYS_DEBUG_BreakPoint();&#10;    RETURN_WARN1(&quot;Sending xxx failed&quot;);&#10;}&#10;$END$" shortcut="SPACE" description="TSE CMD wait finish call with return and result" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="c" value="true" />
    </context>
  </template>
  <template name="/tsecmdwait_NULL_Response" value="uint8_t tmpDataBuf[31] = {0x00};&#10;uint32_t timeOut = 2000;&#10;&#10;if ((tseResult = sendCmdWaitResponse(sbcmd_DummyCmd, (const uint8_t *) tmpDataBuf, sizeof(tmpDataBuf),&#10;                         (NULL),    // No Callback, sync operation&#10;                         timeOut,&#10;                         NULL, 0, NULL&#10;                         )) != SwBi_ERROR_NOERROR) {&#10;    SYS_DEBUG_BreakPoint();&#10;    RETURN_WARN1(&quot;Sending xxx failed&quot;);&#10;}&#10;$END$" shortcut="SPACE" description="TSE CMD wait finish call with return ignore response Data" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="c" value="true" />
    </context>
  </template>
</templateSet>